parents:
    - module: aws
      profile: config

    - aws/config

config:
    ssh_firewall: "?> @percona_subnet_public_ip ? 'ssh-external' | 'ssh-internal'"

domain:
    "@root_domain":
        when: "@provision_domain"
        provider: "@domain_provider"
        keep: true
        certificate_authority: letsencrypt

certificate:
    percona-stats:
        when: "@provision_domain"
        provider: aws
        network: "@aws_networks"
        domain: "@root_domain"
        groups: "@percona_groups"

subnet:
    percona-db-a:
        when_in: "@aws_percona_subnets"
        network: "@aws_networks"
        cidr_prefix: "@percona_subnet_cidr_prefix"
        zone_suffix: a
        use_public_ip: "@percona_subnet_public_ip"
        nat_subnet: "?> not @percona_subnet_public_ip ? 'nat-a' | None"
        groups: "@percona_groups"

    percona-db-b:
        when_in: "@aws_percona_subnets"
        network: "@aws_networks"
        cidr_prefix: "@percona_subnet_cidr_prefix"
        zone_suffix: b
        use_public_ip: "@percona_subnet_public_ip"
        nat_subnet: "?> not @percona_subnet_public_ip ? 'nat-b' | None"
        groups: "@percona_groups"

    percona-db-c:
        when_in: "@aws_percona_subnets"
        network: "@aws_networks"
        cidr_prefix: "@percona_subnet_cidr_prefix"
        zone_suffix: c
        use_public_ip: "@percona_subnet_public_ip"
        nat_subnet: "?> not @percona_subnet_public_ip ? 'nat-c' | None"
        groups: "@percona_groups"

firewall:
    percona-db:
        network: "@aws_networks"
        groups: "@percona_groups"
        rules:
            db-read-in:
                mode: ingress
                protocol: tcp
                from_port: "@percona_port"
                to_port: "@percona_port"
                cidrs: "@network_cidr_base"
            db-write-in:
                mode: ingress
                protocol: tcp
                from_port: "@percona_write_port"
                to_port: "@percona_write_port"
                cidrs: "@network_cidr_base"
            clustercheck-in:
                mode: ingress
                protocol: tcp
                from_port: "@percona_clustercheck_port"
                to_port: "@percona_clustercheck_port"
                cidrs: "@network_cidr_base"
            haproxy-stats-in:
                mode: ingress
                protocol: tcp
                from_port: "@percona_haproxy_stats_port"
                to_port: "@percona_haproxy_stats_port"
                source_firewall: percona-stats-external
            sst-in:
                mode: ingress
                protocol: tcp
                from_port: "@percona_sst_port"
                to_port: "@percona_sst_port"
                cidrs: "&subnet:@aws_percona_subnets:cidr"
            wr-tcp-in:
                mode: ingress
                protocol: tcp
                from_port: "@percona_wr_port"
                to_port: "@percona_wr_port"
                cidrs: "&subnet:@aws_percona_subnets:cidr"
            wr-udp-in:
                mode: ingress
                protocol: udp
                from_port: "@percona_wr_port"
                to_port: "@percona_wr_port"
                cidrs: "&subnet:@aws_percona_subnets:cidr"
            ist-in:
                mode: ingress
                protocol: tcp
                from_port: "@percona_ist_port"
                to_port: "@percona_ist_port"
                cidrs: "&subnet:@aws_percona_subnets:cidr"
    percona-stats-external:
        network: "@aws_networks"
        groups: "@percona_groups"
        rules:
            haproxy-stats-in:
                mode: ingress
                protocol: tcp
                from_port: "@aws_percona_stats_lb_port"
                to_port: "@aws_percona_stats_lb_port"

server:
    percona-db:
        count: 1
        provider: ec2
        network: "@aws_networks"
        subnet: "@aws_percona_subnets"
        image: "@aws_ubuntu_image[<network>]"
        ssh_port: "@ssh_port"
        user: "@aws_ubuntu_user"
        machine: "@aws_percona_machine"
        tenancy: "@aws_percona_tenancy"
        monitoring: "@aws_percona_monitoring"
        ebs_optimized: "@aws_percona_ebs_optimized"
        groups: "@percona_groups"
        volumes:
            "@percona_data_dir":
                provider: aws_ebs
                type: ext4
                owner: mysql
                group: mysql
                mode: "0770"
                location: "@aws_percona_data_device"
                ebs_type: "@aws_percona_ebs_type"
                ebs_size: "@aws_percona_ebs_size"
                ebs_iops: "@aws_percona_ebs_iops"
                ebs_encrypted: "@aws_percona_ebs_encrypted"
        firewalls:
            - internet
            - "@ssh_firewall"
            - percona-db

load_balancer:
    percona-db:
        provider: aws_network
        network: "@aws_networks"
        subnets: "@aws_percona_subnets"
        groups: "@percona_groups"
        internal: true
        listeners:
            main:
                port: "@percona_port"
                target_port: "@percona_port"
                target_protocol: tcp
                health_check_interval: "@aws_percona_lb_health_check_interval"
                healthy_threshold: "@aws_percona_lb_healthy_threshold"
                unhealthy_threshold: "@aws_percona_lb_unhealthy_threshold"
                server_groups: "@percona_groups"
            write:
                port: "@percona_write_port"
                target_port: "@percona_write_port"
                target_protocol: tcp
                health_check_interval: "@aws_percona_lb_health_check_interval"
                healthy_threshold: "@aws_percona_lb_healthy_threshold"
                unhealthy_threshold: "@aws_percona_lb_unhealthy_threshold"
                server_groups: "@percona_groups"
    percona-stats:
        provider: aws_application
        network: "@aws_networks"
        subnets: "@aws_percona_subnets"
        domain: "?> @provision_domain ? '@root_domain' | None"
        internal: false
        idle_timeout: "@aws_percona_stats_lb_timeout"
        groups: "@percona_groups"
        firewalls:
            - internet
            - percona-stats-external
        listeners:
            percona-stats:
                port: "@aws_percona_stats_lb_port"
                certificate: percona-stats
                target_port: "@percona_haproxy_stats_port"
                target_protocol: http
                health_check_path: "@aws_percona_stats_lb_health_path"
                health_check_interval: "@aws_percona_stats_lb_health_check_interval"
                health_check_timeout: "@aws_percona_stats_lb_health_timeout"
                healthy_status: "@aws_percona_stats_lb_healthy_status"
                healthy_threshold: "@aws_percona_stats_lb_healthy_threshold"
                unhealthy_threshold: "@aws_percona_stats_lb_unhealthy_threshold"
                server_groups: "@percona_groups"

run:
    percona-db-credentials:
        command: server rotate
        server_search: groups.name=percona

    percona-user-environment:
        requires: percona-db-credentials
        module: cluster
        task: user-environment
        servers: groups.name=percona

    percona-cluster:
        requires: percona-user-environment
        task: percona
        haproxy_stats_user: "@percona_haproxy_stats_user"
        root_password: "@percona_root_password"
        replicator_password: "@percona_replicator_password"
        mysqlchk_password: "@percona_mysqlchk_password"
        haproxy_stats_password: "@percona_haproxy_stats_password"
        data_dir: "@percona_data_dir"
        db_port: "@percona_port"
        write_port: "@percona_write_port"
        mysqlchk_port: "@percona_clustercheck_port"
        haproxy_stats_port: "@percona_haproxy_stats_port"
        server_ips: "&server:percona-db*:private_ip"
        scopes:
            network: "@aws_networks"
        servers:
            - subnet.network.name=<network>
            - groups.name=percona
        global_config:
            mysqld:
                wsrep_cluster_address: gcomm://&server:percona-db*:private_ip
                wsrep_provider_options: "gmcast.segment=@aws_percona_wsrep_segment[<network>]"
